FORMAT: 1A
HOST: https://tbnt.digital

# TBNT CMS
This page provide documentation of [TBNT CMS API](https://tbnt.digital).

<br />

## Documentation
+ [API Blueprint](https://apiblueprint.org)
+ [Aglio CLI (renderer)](https://github.com/danielgtaylor/aglio)
+ [Snowboard CLI (convert)](https://github.com/bukalapak/snowboard)
+ [Vanadia CLI (export)](https://github.com/bukalapak/vanadia)

**Export**

`npm run docs`

<br />

## Aglio CLI
**Server**

`npm run doc_aglio_watch`

**Output**

`npm run doc_aglio`

<br />

## Snowboard CLI
`npm run doc_snowboard`

<br />

## Vanadia CLI
`npm run doc_vanadia`

<br />

## Start
+ `composer install`
+ `npm i`
+ import `database/dumps/<project-last-export.sql-gz>`
+ duplicate `.env.example` to `.env`
+ update `.env` properties according to your needs

<br />

## Env common props
+ `DB_HOST`
+ `DB_PORT`
+ `DB_DATABASE`
+ `DB_USERNAME`
+ `DB_PASSWORD`
+ `GOOGLE_ANALYTICS_ID`
+ `GOOGLE_TAG_MANAGER_ID`
+ `FACEBOOK_PIXEL_ID`

<br />

## Custom CLI
**Create user**

`php artisan create-user`

**Create a backup of the database using mysqldump (may export your db without emoji issues)**

`php artisan mysql-dump`

**Reset laravel passport**

`php artisan set-laravel-passport`

**Decode string**

`php artisan string-decode`

**Decrypt string**

`php artisan string-decrypt`

**Encode string**

`php artisan string-encode`

**Encrypt string**

`php artisan string-encrypt`

**Hash string**

`php artisan string-hash`

<br />

## Success
All successfull requests are returned with a `Status Code: 200`:

```
HTTP/1.1 200 OK
```

And in JSON format:

```
Content-Type: application/json
```

<br />

## Errors
All failed requests are returned with a `Status Code: <code>`:

```
HTTP/1.1 404 Not Found
```

In JSON format:

```
Content-Type: application/json
```

And formated with a `code` and a `message` attributes:

```
{
    "code": 404,
    "message": "The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.",
}
```

<br />

## Authentication
First, you will need to signin/login to get a `token`.

Then, you must append the returned `token` to the headers to make the authenticated calls:

```
Authentication: Bearer <token>
```

When the token is expired, you will receive a `Status Code: 401`.

Then, to regenerate a new token:

+ Call `/api/auth/refresh-token` to get a new `token`.
+ Update the `Authentication: Bearer` header.

<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />

<!-- include(data.apib) -->

<!-- include(auth.apib) -->
<!-- include(config.apib) -->
<!-- include(posts.apib) -->
